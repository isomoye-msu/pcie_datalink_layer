$date
	Fri Oct 13 01:20:52 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_dllp_recieve $end
$var wire 8 ! tx_fc_ph_o [7:0] $end
$var wire 12 " tx_fc_pd_o [11:0] $end
$var wire 8 # tx_fc_nph_o [7:0] $end
$var wire 12 $ tx_fc_npd_o [11:0] $end
$var wire 1 % seq_num_vld_o $end
$var wire 12 & seq_num_o [11:0] $end
$var wire 1 ' seq_num_acknack_o $end
$var wire 1 ( s_axis_phy2tlp_tready_o $end
$var wire 1 ) s_axis_phy2dllp_tready_o $end
$var wire 1 * m_axis_dllp2tlp_tvalid_o $end
$var wire 4 + m_axis_dllp2tlp_tuser_o [3:0] $end
$var wire 1 , m_axis_dllp2tlp_tlast_o $end
$var wire 4 - m_axis_dllp2tlp_tkeep_o [3:0] $end
$var wire 32 . m_axis_dllp2tlp_tdata_o [31:0] $end
$var wire 1 / m_axis_dllp2phy_tvalid_o $end
$var wire 4 0 m_axis_dllp2phy_tuser_o [3:0] $end
$var wire 1 1 m_axis_dllp2phy_tlast_o $end
$var wire 4 2 m_axis_dllp2phy_tkeep_o [3:0] $end
$var wire 32 3 m_axis_dllp2phy_tdata_o [31:0] $end
$var wire 1 4 fc2_values_stored_o $end
$var wire 1 5 fc1_values_stored_o $end
$var parameter 32 6 DATA_WIDTH $end
$var parameter 32 7 KEEP_WIDTH $end
$var parameter 32 8 RAM_ADDR_WIDTH $end
$var parameter 32 9 RAM_DATA_WIDTH $end
$var parameter 32 : RETRY_TLP_SIZE $end
$var parameter 32 ; RX_FIFO_SIZE $end
$var parameter 32 < STRB_WIDTH $end
$var parameter 32 = S_COUNT $end
$var parameter 32 > TLP_SEG_COUNT $end
$var parameter 32 ? TX_SEQ_NUM_COUNT $end
$var parameter 32 @ TX_SEQ_NUM_WIDTH $end
$var parameter 32 A USER_WIDTH $end
$var reg 1 B clk_i $end
$var reg 1 C m_axis_dllp2phy_tready_i $end
$var reg 1 D m_axis_dllp2tlp_tready_i $end
$var reg 1 E rst_i $end
$var reg 32 F s_axis_phy2dllp_tdata_i [31:0] $end
$var reg 4 G s_axis_phy2dllp_tkeep_i [3:0] $end
$var reg 1 H s_axis_phy2dllp_tlast_i $end
$var reg 4 I s_axis_phy2dllp_tuser_i [3:0] $end
$var reg 1 J s_axis_phy2dllp_tvalid_i $end
$var reg 32 K s_axis_phy2tlp_tdata_i [31:0] $end
$var reg 4 L s_axis_phy2tlp_tkeep_i [3:0] $end
$var reg 1 M s_axis_phy2tlp_tlast_i $end
$var reg 4 N s_axis_phy2tlp_tuser_i [3:0] $end
$var reg 1 O s_axis_phy2tlp_tvalid_i $end
$scope module dllp_recieve_inst $end
$var wire 1 B clk_i $end
$var wire 2 P link_status_i [1:0] $end
$var wire 1 C m_axis_dllp2phy_tready_i $end
$var wire 1 D m_axis_dllp2tlp_tready_i $end
$var wire 1 E rst_i $end
$var wire 32 Q s_axis_phy2dllp_tdata_i [31:0] $end
$var wire 4 R s_axis_phy2dllp_tkeep_i [3:0] $end
$var wire 1 H s_axis_phy2dllp_tlast_i $end
$var wire 4 S s_axis_phy2dllp_tuser_i [3:0] $end
$var wire 1 J s_axis_phy2dllp_tvalid_i $end
$var wire 32 T s_axis_phy2tlp_tdata_i [31:0] $end
$var wire 4 U s_axis_phy2tlp_tkeep_i [3:0] $end
$var wire 1 M s_axis_phy2tlp_tlast_i $end
$var wire 4 V s_axis_phy2tlp_tuser_i [3:0] $end
$var wire 1 O s_axis_phy2tlp_tvalid_i $end
$var wire 8 W tx_fc_ph_o [7:0] $end
$var wire 12 X tx_fc_pd_o [11:0] $end
$var wire 8 Y tx_fc_nph_o [7:0] $end
$var wire 12 Z tx_fc_npd_o [11:0] $end
$var wire 1 % seq_num_vld_o $end
$var wire 12 [ seq_num_o [11:0] $end
$var wire 1 ' seq_num_acknack_o $end
$var wire 1 ( s_axis_phy2tlp_tready_o $end
$var wire 1 ) s_axis_phy2dllp_tready_o $end
$var wire 1 * m_axis_dllp2tlp_tvalid_o $end
$var wire 4 \ m_axis_dllp2tlp_tuser_o [3:0] $end
$var wire 1 , m_axis_dllp2tlp_tlast_o $end
$var wire 4 ] m_axis_dllp2tlp_tkeep_o [3:0] $end
$var wire 32 ^ m_axis_dllp2tlp_tdata_o [31:0] $end
$var wire 1 / m_axis_dllp2phy_tvalid_o $end
$var wire 4 _ m_axis_dllp2phy_tuser_o [3:0] $end
$var wire 1 1 m_axis_dllp2phy_tlast_o $end
$var wire 4 ` m_axis_dllp2phy_tkeep_o [3:0] $end
$var wire 32 a m_axis_dllp2phy_tdata_o [31:0] $end
$var wire 1 4 fc2_values_stored_o $end
$var wire 1 5 fc1_values_stored_o $end
$var parameter 32 b DATA_WIDTH $end
$var parameter 32 c KEEP_WIDTH $end
$var parameter 32 d RAM_ADDR_WIDTH $end
$var parameter 32 e RAM_DATA_WIDTH $end
$var parameter 32 f RX_FIFO_SIZE $end
$var parameter 32 g STRB_WIDTH $end
$var parameter 32 h S_COUNT $end
$var parameter 32 i TLP_SEG_COUNT $end
$var parameter 32 j TX_SEQ_NUM_COUNT $end
$var parameter 32 k TX_SEQ_NUM_WIDTH $end
$var parameter 32 l USER_WIDTH $end
$scope module dllp2tlp_inst $end
$var wire 1 B clk_i $end
$var wire 2 m link_status_i [1:0] $end
$var wire 1 D m_axis_tready_i $end
$var wire 1 C m_dllp_axis_tready_i $end
$var wire 1 E rst_i $end
$var wire 32 n s_axis_tdata_i [31:0] $end
$var wire 4 o s_axis_tkeep_i [3:0] $end
$var wire 1 M s_axis_tlast_i $end
$var wire 4 p s_axis_tuser_i [3:0] $end
$var wire 1 O s_axis_tvalid_i $end
$var wire 1 q fifo_full $end
$var wire 1 r fifo_empty $end
$var wire 16 s dllp_crc_out [15:0] $end
$var wire 32 t crc_out32 [31:0] $end
$var wire 32 u crc_out16 [31:0] $end
$var wire 32 v bram1_data_out [31:0] $end
$var wire 32 w bram0_data_out [31:0] $end
$var parameter 32 x DATA_WIDTH $end
$var parameter 32 y KEEP_WIDTH $end
$var parameter 32 z RAM_ADDR_WIDTH $end
$var parameter 32 { RAM_DATA_WIDTH $end
$var parameter 32 | RX_FIFO_SIZE $end
$var parameter 32 } STRB_WIDTH $end
$var parameter 32 ~ S_COUNT $end
$var parameter 32 !" TLP_SEG_COUNT $end
$var parameter 32 "" TX_SEQ_NUM_COUNT $end
$var parameter 32 #" TX_SEQ_NUM_WIDTH $end
$var parameter 32 $" USER_WIDTH $end
$var reg 12 %" bram0_addr [11:0] $end
$var reg 32 &" bram0_data_in [31:0] $end
$var reg 1 '" bram0_wr $end
$var reg 12 (" bram1_addr [11:0] $end
$var reg 32 )" bram1_data_in [31:0] $end
$var reg 1 *" bram1_wr $end
$var reg 16 +" crc_in_c [15:0] $end
$var reg 16 ," crc_in_r [15:0] $end
$var reg 5 -" curr_state [4:0] $end
$var reg 48 ." dll_packet [47:0] $end
$var reg 32 /" dllp_lcrc_c [31:0] $end
$var reg 32 0" dllp_lcrc_r [31:0] $end
$var reg 16 1" expected_seq_c [15:0] $end
$var reg 16 2" expected_seq_r [15:0] $end
$var reg 32 3" fifo_head_c [31:0] $end
$var reg 32 4" fifo_head_r [31:0] $end
$var reg 32 5" fifo_tail_c [31:0] $end
$var reg 32 6" fifo_tail_r [31:0] $end
$var reg 1 7" is_cpl_c $end
$var reg 1 8" is_cpl_r $end
$var reg 1 9" is_np_c $end
$var reg 1 :" is_np_r $end
$var reg 1 ;" is_p_c $end
$var reg 1 <" is_p_r $end
$var reg 32 =" m_axis_tdata_o [31:0] $end
$var reg 4 >" m_axis_tkeep_o [3:0] $end
$var reg 1 , m_axis_tlast_o $end
$var reg 4 ?" m_axis_tuser_o [3:0] $end
$var reg 1 * m_axis_tvalid_o $end
$var reg 32 @" m_dllp_axis_tdata_o [31:0] $end
$var reg 4 A" m_dllp_axis_tkeep_o [3:0] $end
$var reg 1 1 m_dllp_axis_tlast_o $end
$var reg 4 B" m_dllp_axis_tuser_o [3:0] $end
$var reg 1 / m_dllp_axis_tvalid_o $end
$var reg 5 C" next_state [4:0] $end
$var reg 16 D" next_transmit_seq_c [15:0] $end
$var reg 16 E" next_transmit_seq_r [15:0] $end
$var reg 12 F" npd_credits_consumed_c [11:0] $end
$var reg 12 G" npd_credits_consumed_r [11:0] $end
$var reg 8 H" nph_credits_consumed_c [7:0] $end
$var reg 8 I" nph_credits_consumed_r [7:0] $end
$var reg 12 J" pd_credits_consumed_c [11:0] $end
$var reg 12 K" pd_credits_consumed_r [11:0] $end
$var reg 8 L" ph_credits_consumed_c [7:0] $end
$var reg 8 M" ph_credits_consumed_r [7:0] $end
$var reg 32 N" rx_addr_c [31:0] $end
$var reg 32 O" rx_addr_r [31:0] $end
$var reg 1 ( s_axis_tready_o $end
$var reg 32 P" tlp_curr_count_c [31:0] $end
$var reg 32 Q" tlp_curr_count_r [31:0] $end
$var reg 3 R" tlp_curr_state [2:0] $end
$var reg 3 S" tlp_next_state [2:0] $end
$var reg 32 T" tlp_word_count_c [31:0] $end
$var reg 32 U" tlp_word_count_r [31:0] $end
$var reg 32 V" tx_addr_c [31:0] $end
$var reg 32 W" tx_addr_r [31:0] $end
$var reg 1 X" tx_tlp_ready_c $end
$var reg 32 Y" tx_word_count_c [31:0] $end
$var reg 32 Z" tx_word_count_r [31:0] $end
$var reg 32 [" word_count_c [31:0] $end
$var reg 32 \" word_count_r [31:0] $end
$scope module dllp_crc_inst $end
$var wire 1 ]" Complement $end
$var wire 32 ^" Data [31:0] $end
$var wire 16 _" ShiftChain [15:0] $end
$var wire 16 `" Crc [15:0] $end
$scope module crc0 $end
$var wire 16 a" CombCrc [15:0] $end
$var wire 1 b" Complement $end
$var wire 16 c" Crc [15:0] $end
$var wire 16 d" Data [15:0] $end
$var wire 16 e" DtXorShift [15:0] $end
$var wire 16 f" ShiftIn [15:0] $end
$var wire 16 g" ShiftChain [15:0] $end
$upscope $end
$scope module crc1 $end
$var wire 16 h" CombCrc [15:0] $end
$var wire 1 ]" Complement $end
$var wire 16 i" Crc [15:0] $end
$var wire 16 j" Data [15:0] $end
$var wire 16 k" DtXorShift [15:0] $end
$var wire 16 l" ShiftIn [15:0] $end
$var wire 16 m" ShiftChain [15:0] $end
$upscope $end
$upscope $end
$scope module recieve_buffer_inst $end
$var wire 2 n" a_addr [-1:0] $end
$var wire 1 B a_clk $end
$var wire 32 o" a_data_in [31:0] $end
$var wire 1 '" a_wr $end
$var wire 2 p" b_addr [-1:0] $end
$var wire 1 B b_clk $end
$var wire 32 q" b_data_in [31:0] $end
$var wire 1 r" b_wr $end
$var wire 1 E rst $end
$var parameter 32 s" RAM_ADDR_WIDTH $end
$var parameter 32 t" RAM_DATA_WIDTH $end
$var parameter 32 u" RamDataDepth $end
$var reg 32 v" a_data_out [31:0] $end
$var reg 32 w" b_data_out [31:0] $end
$upscope $end
$scope module tlp_crc16_inst $end
$var wire 32 x" crcIn [31:0] $end
$var wire 16 y" data [15:0] $end
$var wire 32 z" crcOut [31:0] $end
$upscope $end
$scope module tlp_crc32_inst $end
$var wire 32 {" crcIn [31:0] $end
$var wire 32 |" data [31:0] $end
$var wire 32 }" crcOut [31:0] $end
$upscope $end
$scope begin main_combo $end
$upscope $end
$scope begin main_seq $end
$upscope $end
$scope begin transmit_tlp_combo $end
$upscope $end
$upscope $end
$scope module dllp_handler_inst $end
$var wire 1 B clk_i $end
$var wire 1 5 fc1_values_stored_o $end
$var wire 1 4 fc2_values_stored_o $end
$var wire 1 ~" link_status_i $end
$var wire 1 E rst_i $end
$var wire 32 !# s_axis_tdata_i [31:0] $end
$var wire 4 "# s_axis_tkeep_i [3:0] $end
$var wire 1 H s_axis_tlast_i $end
$var wire 4 ## s_axis_tuser_i [3:0] $end
$var wire 1 J s_axis_tvalid_i $end
$var wire 12 $# tx_fc_npd_o [11:0] $end
$var wire 8 %# tx_fc_nph_o [7:0] $end
$var wire 12 &# tx_fc_pd_o [11:0] $end
$var wire 8 '# tx_fc_ph_o [7:0] $end
$var wire 16 (# crc_out [15:0] $end
$var parameter 32 )# DATA_WIDTH $end
$var parameter 32 *# KEEP_WIDTH $end
$var parameter 32 +# RAM_ADDR_WIDTH $end
$var parameter 32 ,# RAM_DATA_WIDTH $end
$var parameter 32 -# STRB_WIDTH $end
$var parameter 32 .# S_COUNT $end
$var parameter 32 /# TLP_SEG_COUNT $end
$var parameter 32 0# TX_SEQ_NUM_COUNT $end
$var parameter 32 1# TX_SEQ_NUM_WIDTH $end
$var parameter 32 2# USER_WIDTH $end
$var reg 16 3# crc_in_c [15:0] $end
$var reg 16 4# crc_in_r [15:0] $end
$var reg 3 5# curr_state [2:0] $end
$var reg 48 6# dll_packet_c [47:0] $end
$var reg 48 7# dll_packet_r [47:0] $end
$var reg 1 8# fc1_c_stored_c $end
$var reg 1 9# fc1_c_stored_r $end
$var reg 1 :# fc1_np_stored_c $end
$var reg 1 ;# fc1_np_stored_r $end
$var reg 1 <# fc1_p_stored_c $end
$var reg 1 =# fc1_p_stored_r $end
$var reg 1 ># fc2_c_stored_c $end
$var reg 1 ?# fc2_c_stored_r $end
$var reg 1 @# fc2_np_stored_c $end
$var reg 1 A# fc2_np_stored_r $end
$var reg 1 B# fc2_p_stored_c $end
$var reg 1 C# fc2_p_stored_r $end
$var reg 3 D# next_state [2:0] $end
$var reg 16 E# next_transmit_seq_c [15:0] $end
$var reg 16 F# next_transmit_seq_r [15:0] $end
$var reg 1 ) s_axis_tready_o $end
$var reg 1 ' seq_num_acknack_o $end
$var reg 12 G# seq_num_o [11:0] $end
$var reg 1 % seq_num_vld_o $end
$var reg 12 H# tx_fc_cd_c [11:0] $end
$var reg 12 I# tx_fc_cd_r [11:0] $end
$var reg 8 J# tx_fc_ch_c [7:0] $end
$var reg 8 K# tx_fc_ch_r [7:0] $end
$var reg 12 L# tx_fc_npd_c [11:0] $end
$var reg 12 M# tx_fc_npd_r [11:0] $end
$var reg 8 N# tx_fc_nph_c [7:0] $end
$var reg 8 O# tx_fc_nph_r [7:0] $end
$var reg 12 P# tx_fc_pd_c [11:0] $end
$var reg 12 Q# tx_fc_pd_r [11:0] $end
$var reg 8 R# tx_fc_ph_c [7:0] $end
$var reg 8 S# tx_fc_ph_r [7:0] $end
$scope module dllp_crc_inst $end
$var wire 1 T# Complement $end
$var wire 32 U# Data [31:0] $end
$var wire 16 V# ShiftChain [15:0] $end
$var wire 16 W# Crc [15:0] $end
$scope module crc0 $end
$var wire 16 X# CombCrc [15:0] $end
$var wire 1 Y# Complement $end
$var wire 16 Z# Crc [15:0] $end
$var wire 16 [# Data [15:0] $end
$var wire 16 \# DtXorShift [15:0] $end
$var wire 16 ]# ShiftIn [15:0] $end
$var wire 16 ^# ShiftChain [15:0] $end
$upscope $end
$scope module crc1 $end
$var wire 16 _# CombCrc [15:0] $end
$var wire 1 T# Complement $end
$var wire 16 `# Crc [15:0] $end
$var wire 16 a# Data [15:0] $end
$var wire 16 b# DtXorShift [15:0] $end
$var wire 16 c# ShiftIn [15:0] $end
$var wire 16 d# ShiftChain [15:0] $end
$upscope $end
$upscope $end
$scope begin main_combo $end
$upscope $end
$scope begin main_seq $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 2#
b0 1#
b0 0#
b0 /#
b1 .#
b100 -#
b100000 ,#
b1100 +#
b100 *#
b100000 )#
b1 u"
b100000 t"
b0 s"
b100 $"
b0 #"
b0 ""
b0 !"
b1 ~
b100 }
b0 |
b100000 {
b1100 z
b100 y
b100000 x
b100 l
b0 k
b0 j
b0 i
b1 h
b100 g
b0 f
b100000 e
b1100 d
b100 c
b100000 b
b100 A
b0 @
b0 ?
b0 >
b1 =
b100 <
b0 ;
b11 :
b100000 9
b1100 8
b100 7
b100000 6
$end
#0
$dumpvars
bx d#
bx c#
bx b#
bx a#
bx `#
bx _#
bx ^#
b1111111111111111 ]#
bx \#
bx [#
b1111111111111111 Z#
0Y#
bx X#
bx W#
bx V#
bx U#
1T#
b0 S#
b0 R#
b0 Q#
b0 P#
b0 O#
b0 N#
b0 M#
b0 L#
b0 K#
b0 J#
b0 I#
b0 H#
b0 G#
b0 F#
b0 E#
b0 D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
bx (#
b0 '#
b0 &#
b0 %#
b0 $#
bx ##
bx "#
bx !#
z~"
bx }"
bx |"
b0 {"
bx z"
bx y"
b11111111111111111111111111111111 x"
bx w"
bx v"
0r"
b0 q"
b0 p"
b0 o"
b0 n"
b11001010111001 m"
b1111011010101010 l"
b1111011010101010 k"
b0 j"
b1001000010101010 i"
b1011001101100010 h"
b1111011010101010 g"
b1111111111111111 f"
b1111111111111111 e"
b0 d"
b1111111111111111 c"
0b"
b110111101010101 a"
b1011001101100010 `"
b1111011010101010 _"
b0 ^"
1]"
b0 \"
b0 ["
b0 Z"
b0 Y"
0X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
0<"
0;"
0:"
09"
08"
07"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b11111111111111111111111111111111 0"
b11111111111111111111111111111111 /"
b0 ."
b0 -"
b0 ,"
b0 +"
0*"
b0 )"
b0 ("
0'"
b0 &"
b0 %"
bx w
bx v
bx u
bx t
b1011001101100010 s
1r
0q
bx p
bx o
bx n
bz m
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
bx V
bx U
bx T
bx S
bx R
bx Q
bz P
xO
bx N
xM
bx L
bx K
xJ
bx I
xH
bx G
bx F
1E
xD
xC
xB
05
04
b0 3
b0 2
01
b0 0
0/
b0 .
b0 -
0,
b0 +
0*
0)
1(
0'
b0 &
0%
b0 $
b0 #
b0 "
b0 !
$end
#200000000000000
0E
#100200000000000000
